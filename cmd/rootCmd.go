package cmd

import (
	"fmt"
	log "github.com/sirupsen/logrus"
	"github.com/spf13/cobra"
	"github.com/spf13/pflag"
	"github.com/spf13/viper"
	"path"
	"strings"
)

type RootCmd struct {
	Cmd *cobra.Command
	//flags
	CfgFile   string
	envPrefix string
}

func (c RootCmd) GetCmd() *cobra.Command {
	return c.Cmd
}
func NewRootCmd() *RootCmd {
	c := &RootCmd{}
	c.Cmd = &cobra.Command{
		Use:   "mono-repo-tag",
		Short: "semver compatible cli for monorepos",
		Long: `Helps with tagging multiple projects under a monorepo.
		`,
		PersistentPreRunE: func(cmd *cobra.Command, args []string) error {
			// You can bind cobra and viper in a few locations, but PersistencePreRunE on the root command works well
			return c.initializeConfig(cmd)
		},
		//RunE: func(cmd *cobra.Command, args []string) error {
		//},
	}
	c.Cmd.PersistentFlags().StringVar(&c.CfgFile, "config", "", "config file (default is .msc/config.yaml)")
	c.addCmds()
	return c
}

// Import and add autogenerated commands here
func getCommandList() []*cobra.Command {
	var commands []*cobra.Command
	return commands
}

func (c *RootCmd) addCmds() {
	for _, command := range getCommandList() {
		c.Cmd.AddCommand(command)
	}
}

func (c *RootCmd) bindFlags(cmd *cobra.Command, v *viper.Viper) {
	cmd.Flags().VisitAll(func(f *pflag.Flag) {
		// Environment variables can't have dashes in them, so bind them to their equivalent
		// keys with underscores, e.g. --favorite-color to STRING_FAVORITE_COLOR
		if strings.Contains(f.Name, "-") {
			envVarSuffix := strings.ToUpper(strings.ReplaceAll(f.Name, "-", "_"))
			err := v.BindEnv(f.Name, fmt.Sprintf("%s_%s", c.envPrefix, envVarSuffix))
			if err != nil {
				log.Fatal(err)
			}
		}

		// Apply the viper config value to the flag when the flag is not set and viper has a value
		if !f.Changed && v.IsSet(f.Name) {
			val := v.Get(f.Name)
			err := cmd.Flags().Set(f.Name, fmt.Sprintf("%v", val))
			if err != nil {
				log.Fatal(err)
			}
		}
	})
}

func (c *RootCmd) initializeConfig(cmd *cobra.Command) error {
	c.envPrefix = "MSC"

	v := viper.New()
	if c.CfgFile != "" {
		// Use config file from the flag.
		v.SetConfigFile(c.CfgFile)
	} else {
		configDir := path.Join(".", ".msc")

		v.AddConfigPath(configDir)
		v.SetConfigName("config")
	}

	v.SetEnvPrefix(c.envPrefix)
	v.AutomaticEnv()

	if err := viper.ReadInConfig(); err != nil {
		if _, ok := err.(viper.ConfigFileNotFoundError); ok {
			// Config file not found; ignore error if desired
			log.WithFields(log.Fields{
				"config path": v.ConfigFileUsed(),
			}).Fatal("Did not find configuration file ")
		} else {
			// Config file was found but another error was produced
		}
	}
	if err := v.ReadInConfig(); err != nil {
		// config file does not exist
		if _, ok := err.(viper.ConfigFileNotFoundError); !ok {
			return err
		}
	}

	// Bind the current command's flags to viper
	c.bindFlags(cmd, v)

	return nil
}
