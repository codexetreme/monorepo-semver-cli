package cmd

import (
	"fmt"
	log "github.com/sirupsen/logrus"
	"github.com/spf13/cobra"
	"github.com/spf13/pflag"
	"github.com/spf13/viper"
	"monorepo-semver-cli/cmd/initializeCmd"
	"strings"
)

type cliConfig struct {
	fileName         string
	containingFolder string
}

type RootCmd struct {
	Cmd *cobra.Command
	//flags
	CfgFileLocation string
	jsonLogs        bool
	logLevel        string

	// config options
	cfgOptions cliConfig
	envPrefix  string
	// if set, creates the base config files with the some sane defaults
	initMode bool
}

func (c RootCmd) GetCmd() *cobra.Command {
	return c.Cmd
}
func NewRootCmd() *RootCmd {
	c := &RootCmd{}
	c.cfgOptions = cliConfig{
		fileName:         "cli-config",
		containingFolder: ".msc",
	}
	c.Cmd = &cobra.Command{
		Use:   "mono-repo-tag",
		Short: "semver compatible cli for monorepos",
		Long: `Helps with tagging multiple projects under a monorepo.
		`,
		PersistentPreRunE: func(cmd *cobra.Command, args []string) error {
			// You can bind cobra and viper in a few locations,
			//but PersistencePreRunE on the root command works well
			return c.initializeConfig(cmd)
		},
		RunE: func(cmd *cobra.Command, args []string) error {

			if c.initMode {
				log.Info("initializing config... ")
				createConfig()
				return nil
			}
			return nil
		},
	}
	c.Cmd.Flags().BoolVar(&c.initMode, "init", false, "generate the cli configuration file (default: false)")
	c.Cmd.PersistentFlags().BoolVar(&c.jsonLogs, "json-logs", false, "print logs in JSON format (default: false)")
	c.Cmd.PersistentFlags().StringVar(&c.logLevel, "init", "INFO", "set the logging level (default: INFO) (valid: INFO, DEBUG)")
	c.Cmd.PersistentFlags().StringVar(&c.CfgFileLocation, "config", "", "config file (default: "+c.cfgOptions.containingFolder+"/"+c.cfgOptions.fileName+")")
	c.addCmds()
	return c
}

// Import and add autogenerated commands here
func getCommandList() []*cobra.Command {
	var commands = []*cobra.Command{
		initializeCmd.NewCmd().Cmd,
	}
	return commands
}

func (c *RootCmd) addCmds() {
	for _, command := range getCommandList() {
		c.Cmd.AddCommand(command)
	}
}

func (c *RootCmd) bindFlags(cmd *cobra.Command, v *viper.Viper) {
	cmd.Flags().VisitAll(func(f *pflag.Flag) {
		// Environment variables can't have dashes in them, so bind them to their equivalent
		// keys with underscores, e.g. --favorite-color to STRING_FAVORITE_COLOR
		if strings.Contains(f.Name, "-") {
			envVarSuffix := strings.ToUpper(strings.ReplaceAll(f.Name, "-", "_"))
			err := v.BindEnv(f.Name, fmt.Sprintf("%s_%s", c.envPrefix, envVarSuffix))
			if err != nil {
				log.Fatal(err)
			}
		}

		// Apply the viper config value to the flag when the flag is not set and viper has a value
		if !f.Changed && v.IsSet(f.Name) {
			val := v.Get(f.Name)
			err := cmd.Flags().Set(f.Name, fmt.Sprintf("%v", val))
			if err != nil {
				log.Fatal(err)
			}
		}
	})
}

func (c *RootCmd) initializeConfig(cmd *cobra.Command) error {
	c.envPrefix = "MSC"

	v := viper.New()
	if c.CfgFileLocation != "" {
		// Use config file from the flag.
		v.SetConfigFile(c.CfgFileLocation)
	} else {
		v.SetConfigType("yml")
		v.AddConfigPath(c.cfgOptions.containingFolder)
		v.SetConfigName(c.cfgOptions.fileName)
	}

	v.SetEnvPrefix(c.envPrefix)
	v.AutomaticEnv()
	err := v.ReadInConfig()
	if err != nil {
		if _, ok := err.(viper.ConfigFileNotFoundError); ok {
			// Config file not found; ignore error if desired
			log.
				WithFields(log.Fields{}).
				Warn("Did not find configuration file, using options passed on the cli, or ENV vars ")
		} else {
			// Config file was found but another error was produced
		}
	}

	// Bind the current command's flags to viper
	c.bindFlags(cmd, v)

	return nil
}
